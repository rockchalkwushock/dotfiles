#!/usr/bin/env bash

###########################################
# REVIEW:
# THIS FILE IS STILL A WORK IN PROGRESS.
# VERY LITTLE ERROR HANDLING HAS BEEN
# WRITTEN INTO THE FUNCTIONS.
###########################################

#### Constants
FG_YELLOW="$(tput setaf 185)";
FG_GREEN="$(tput setaf 118)";
FG_BLUE="$(tput setaf 75)";
FG_PURPLE="$(tput setaf 171)";
RESET="$(tput sgr0)";
BOLD="$(tput bold)";
CLOUDPATH="$HOME/Library/Mobile Documents/com~apple~CloudDocs/System_Files";
NEXT="$HOME/Desktop/WIP/TEMPLATES/next-boilerplate/.";
OSS="$HOME/Desktop/WIP/TEMPLATES/oss-template/.";
#####

#### NOTES
# $# - number of args passed.
# $@ - take in 'all' args passed.
# ${@:x} - where 'x' is the desired starting point in the array.
####

# copies files or directories to iCloud.
function copy2Cloud()
{
  if [ $# -eq 0 ]; then
    echo "Must provide a file or directory!";
    return 1;
  else
    # loop through # of args passed
    for i in "$@"
    do
      if [ -d $i ]; then
        cp -R "$i" "$CLOUDPATH";
        echo "$i copied to iCloud.";
      else
        cp "$i" "$CLOUDPATH";
        echo "$i copied to iCloud.";
      fi;
    done;
  fi;
}

# `vsc` with no arguments will open the current directory in visual studio code, otherwise opens to given location.
function vsc()
{
  if [ $# -eq 0 ]; then
    code .;
  else
    code "$@";
  fi;
}

# Add packages using `yarn`.
# Preset flags for '~' prefix & emojis are applied.
# $1 = dev, if wanting to add devDeps.
# ${@:2} = packages to be added by `yarn`.
function add()
{
  prompt="${BOLD}${FG_YELLOW}---> ${FG_PURPLE}Added ${FG_BLUE}"$@"${RESET}.";

  if [ "$1" == "dev" ]; then
    command yarn add -DT --emoji "${@:2}";
    echo $prompt;
  else
    # Since not applying 'dev' as '$1' use '$@'.
    command yarn add -T --emoji "$@";
    echo $prompt;
  fi;
}

# Create a project from template
# $1 = type of template to use
# $2 = name of (project|directory)
function makeFromTemplate()
{
  # Prompts
  templatePrompt="${BOLD}---> ";
  templatePrompt+="${FG_BLUE}Choose a template ";
  templatePrompt+="${FG_PURPLE}[${FG_GREEN}next|oss${FG_PURPLE}]${RESET}: ";

  dirNamePrompt="${BOLD}---> ";
  dirNamePrompt+="${FG_BLUE}Name your project${RESET}: ";

  successPrompt="${BOLD}---> ";
  successPrompt+="${FG_PURPLE}$dirName ";
  successPrompt+="${FG_YELLOW}was created as a ";
  successPrompt+="${FG_BLUE}$template ";
  successPrompt+="${FG_YELLOW}project${RESET}.\n";
  successPrompt+="${BOLD}---> ";
  successPrompt+="${FG_GREEN}Opening in VSCode${RESET}.";


  echo $templatePrompt;
  read template;
  echo $dirNamePrompt;
  read dirName;

  # Determine template to be used:
  if [ "$template" == "next" ]; then
    mkdir "$dirName";
    cp -R "$NEXT" "$dirName";
  elif [ "$template" == "oss" ]
  then
    mkdir "$dirName";
    cp -R "$OSS" "$dirName";
  else
    echo "I will make more templates later...";
  fi;

  cd $PWD/$dirName;
  # run `yarn` to install modules.
  command yarn install --emoji;
  echo -e $successPrompt;
  # Open project in VSCode.
  vsc;
  return 0;
}
