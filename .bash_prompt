#/usr/bin/env bash

###########################################################
# THIS FILE CONTROLS THE EXPORTING OF THE PS1 VARIABLE THAT
# IS BEING DEFINED BY THE USER.
###########################################################

# DEFINE VARIABLES HERE

yellow=$(tput setaf 185);
green=$(tput setaf 118);
blue=$(tput setaf 75);
purple=$(tput setaf 171);
reset=$(tput sgr0);

# FUNCTION FOR CUSTOMIZING BASH WITH USE OF GIT
# Thanks to @mathiasbynens for the below code
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt#L14

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}


# SETTING THE PS1 VARIABLE FOR USE

PS1="\[${yellow}\]\u";                                                          # Set username
PS1+="\[${purple}\] in ";
PS1+="\[${blue}\]\W ";                                                          # Current Working Directory
PS1+="\$(prompt_git \"\[${purple}\] on \[${green}\]\" \"\[${purple}\]\")";      # Git Repository
PS1+="\[${purple}\]\$ \[${reset}\]";                                            # End Prompt

export PS1;
